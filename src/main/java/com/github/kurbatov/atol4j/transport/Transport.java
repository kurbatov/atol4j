/*
 * atol4j - клиентская библиотека для контрольной кассовой техники (ККТ) АТОЛ
 * Copyright (C) 2019 Олег Викторович Курбатов
 *
 * Это программа является свободным программным обеспечением. Вы можете
 * распространять и/или модифицировать её согласно условиям Стандартной
 * Общественной Лицензии GNU, опубликованной Фондом Свободного Программного
 * Обеспечения, версии 3 или, по Вашему желанию, любой более поздней версии.
 *
 * Эта программа распространяется в надежде, что она будет полезной, но БЕЗ
 * ВСЯКИХ ГАРАНТИЙ, в том числе подразумеваемых гарантий ТОВАРНОГО
 * СОСТОЯНИЯ ПРИ ПРОДАЖЕ и ГОДНОСТИ ДЛЯ ОПРЕДЕЛЁННОГО ПРИМЕНЕНИЯ. Смотрите
 * Стандартную Общественную Лицензию GNU для получения дополнительной
 * информации.
 *
 * Вы должны были получить копию Стандартной Общественной Лицензии GNU
 * вместе с программой. В случае её отсутствия, смотрите
 * http://www.gnu.org/licenses/.
 */
package com.github.kurbatov.atol4j.transport;

import java.util.concurrent.TimeoutException;
import java.util.function.Consumer;

/**
 * Этот интерфейс описывает возможности физического канала обмена данными с ККТ.
 *
 * @author Олег Курбатов &lt;o.v.kurbatov@gmail.com&gt;
 */
public interface Transport {

    /**
     * Устанавливает соединение с устройством.
     */
    void connect();

    /**
     * Разрывает соединение с устройством.
     */
    void disconnect();

    /**
     * Отправляет бинарное сообщение устройству.
     *
     * @param b последовательность байт для отправки
     */
    void write(byte[] b);

    /**
     * Читает ответ от устройства из буфера.
     *
     * Если буфер пуст, возвращает пустой массив.
     *
     * @return содержимое буфера ответа
     */
    byte[] read();

    /**
     * Читает заданное количество байт из буфера ответа устройства.
     *
     * Если в буфере недостаточно байт, ждёт до тех пор когда заднное количество
     * байт будет доступно.
     *
     * @param count количество байт для чтения
     * @return n-первых байт буфера ответа
     */
    byte[] read(int count);

    /**
     * Читает заданное количество байт из буфера ответа устройства.
     *
     * Если в буфере недостаточно байт, ждёт до тех пор когда заднное количество
     * байт будет доступно, но не дольше, чем указанный таймаут.
     *
     * @param count количество байт для чтения
     * @param timeout таймаут в миллисекундах
     * @return n-первых байт буфера ответа
     * @throws TimeoutException указанное количество байт не было получено в
     * течение таймаута
     */
    byte[] read(int count, int timeout) throws TimeoutException;

    /**
     * Подписывает потребителя на асинхронные ответы от устройства.
     *
     * @param consumer подписчик
     */
    void subscribe(Consumer<byte[]> consumer);
    
}
